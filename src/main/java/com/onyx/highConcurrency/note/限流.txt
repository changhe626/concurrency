应用限流-算法
https://www.jianshu.com/p/2596e559db5c

限流就是通过对并发访问/请求进行限速或一个时间窗口内的请求进行限速，从而达到保护系统的目的。一般系统可以通过压测来预估能处理的峰值，
一旦达到设定的峰值阀值，则可以拒绝服务（定向错误页或告知资源没有了）、排队或等待（例如：秒杀、评论、下单）、降级（返回默认数据）
限流不能乱用，否则正常流量会出现一些奇怪的问题，从而导致用户抱怨。

1.计算器法
计数器是最简单粗暴的算法。例如：一个服务每秒能处理100个请求。设置一个1s的滑动窗口，窗口有10个格子，每个格子100ms，每100ms移动一次，
每次移动都记录当前服务请求的次数。内存中保存最近10次的次数（LinkedList）。格子每次移动的时候判断一次，最后一个格子和第一个格子的次数是否相差100，
如果超过，则进行限流。

当格子划分的越多，那么滑动窗口的滚动越平滑，限流的统计就会越精确。


2.滑动窗口


3.漏桶算法

漏桶作为计量工具时，可用于流量整形和流量控制，漏桶的主要概念如下：

一个固定容量的漏桶，按照常量固定速率流出水滴（流出请求）
如果桶是空的，则不需流出水滴
可以以任意速率流入水滴到漏桶（流入请求）
如果流入水滴超出了桶的容量，则流入的水滴溢出了（新流入的请求被拒绝），则漏桶容量是不变的
漏桶可以看做固定容量、固定流出速率的队列，漏桶限制的是请求的流出速率，漏桶中装的是请求



4.令牌桶算法
令牌桶算法是一个存放固定容量令牌（token）的桶，按照固定速率往桶里添加令牌。令牌桶的主要概念如下：

令牌按固定的速率被放入令牌桶中，例如：r tokens/秒
桶中最多存放b个令牌，当桶满时，新添加的令牌被丢弃或拒绝
当一个n字节大小的数据包到达，将从桶中删除n个令牌，接着数据包被发送到网络上
如果桶中的令牌不足n个，则不会删除令牌，且数据包将被限流（丢弃或在缓冲区等待）
令牌桶根据放令牌的速率（r tokens/s）去控制输出的速率（to network）



集群限流
前面讨论的几种算法都属于单机限流的范畴，但是业务需求五花八门，简单的单机限流，根本无法满足他们。

比如为了限制某个资源被每个用户或者商户的访问次数，5s只能访问2次，或者一天只能调用1000次，这种需求，单机限流是无法实现的，这时就需要通过集群限流进行实现。

如何实现？为了控制访问次数，肯定需要一个计数器，而且这个计数器只能保存在第三方服务，比如redis。

大概思路：每次有相关操作的时候，就向redis服务器发送一个incr命令，比如需要限制某个用户访问/index接口的次数，只需要拼接用户id和接口名生成redis的key，每次该用户访问此接口时，只需要对这个key执行incr命令，在这个key带上过期时间，就可以实现指定时间的访问频率。

https://www.lijiaocn.com/%E6%96%B9%E6%B3%95/2018/10/12/ali-traffic-limit-and-service-downgrade-md.html


https://www.infoq.cn/article/microservice-interface-rate-limit


微服务架构中没有接口限流，可能会遇到哪些问题？
针对微服务接口限流，如何选择合适的限流算法？
如何根据场景和性能要求权衡选择单机还是分布式限流？
如何根据业务需求灵活的选择不同的限流熔断机制？
如何对接口选择合适的限流时间粒度和最大限流值？
如何验证微服务接口限流功能的有效性和正确性？
如何打造高度容错、高 TPS、低延迟的限流框架？
文章的最后，还顺带介绍了笔者开源的限流框架： ratelimiter4j，欢迎大家交流使用。